Config git:
	git config --global user.name "some name of the user"
	git config --global user.email "some mail to "

Initializing a git project:
	cd "to the folder you want to use for version control"
	git init

Adding new files:
	- once inside the local repo ...
	- we write index.html
	git status
		- with this, git present the files in which it is aware, which:
			- tracked: files that git knows about and are added to the repository
			- untracked: file that are in you working directory, but not added to the repository.
	- to get git to track them you need to "stage" them, or add them to the stagging environment.


Stagging Environment:
	git add index.html	# to stage the file
	git status	# to se that git now is monitoring the file
	git add --all # add all the files to the stagging environoment, this will stage all changes (new, modified, delete)
		- the shorcut is:
			git add -A
	git status # to check the stagging

Git Commit:
	git commit -m 'First Release of Hello World!'
	- commit without stage:
		- sometimes with small changes, you can just commit, without stagging the files, with -a
			git commit -a -m 'some message to to commit'
	git commit -a -m 'commiting without stagging the file' # not recommended
	git log	# view the history of commit to the repository

Git Help:
	git command -help 
	git help --all 		# to get some help of the commands
	git commit -help

Git Branch:
	git branch hello--world-images	 # create the branch
	git branch  # show the branches
	git checkout hello-world-images	# changes the branch into which we are working
	- git checkout -b new-branch # this create the branch and move into it
	- make some modifications to the files
	git status # check the status of the files, keep an eye to the branch in which we are working
	git add --all 	# stage all the files
	git status # to see the status of the files
	git commit -m 'some information about the commit'			# the commit to the branch

Switching Between Branches:

