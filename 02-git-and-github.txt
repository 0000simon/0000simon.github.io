Github get started:
	git remote add origin URL
		- specifies that you are adding a remote respository, with the specify URL, as an origin to your local git repo.
	git push --set-upstream origin master
		- push our master branch to the origin url, and set as the default remote branch.

Pull from github:
	- pull is a combination of two diff. commands: fetch and merge
	- git FETCH # get all the changes history of a tracked branch/repo
		git fetch origin # to have the recent changes.
		git status # and read to see that what it says that we are behind by 1 commit.
		git log origin/master  # to doble check.
		git diff origin/master  # to show the difference between out local master and the origin/master.
		- so, now that we are certain of the state of, we can safely MERGE.
	- git MERGE
		- combines the current branch, with a specified branch.
		git merge origin/status	# merge our current branch (master) with origin/master.
		git status   # to confirm we are up to date.
	- git PULL
		- is a cobination of fetch and merge. 
		- it is used to pull all changes from a remote repository into the branch you are working on.
		git pull origin # to update our local git. without fetch and merge.

Push changes to github:
	- do some changes in the your local repo
	git commit -a -m 'some message to the commit'
	git status # check that is says that the branch is 'ahead'
	git push origin # here is where git pushes the changes to github

Pull branch from github:
	git pull	# so our repo is up to date.
	git status
	git branch # to confirm in which brand we are working.
		- the command above show only the local branches.
	git branch -a # show all the branches
		- for only remote branche use (-r)
	git checkout html-skeleton
		- we checkout in the branch that we want to work (which is on github)
	git pull 			# to check if it is up to date.
	git branch 		# to check in which branch we are working.
	
Push branch to github:
	git checkout -b update-readme	# here we create a new branch and move into it
	- we some changes to some files
	git status	# to check that some files have been edited
	git add README.md		# we added the giles editted to the stage environment
	git status	
	git commit -m 'updated readme.md for github branches'
	git push origin update-readme		# push the branch of our local repo, to github, where everyone can see the changes.
	- go to github and confirm that the repo has a new branch
	- we can merge into the master branch with "Compare & Pull request"
	- "create pull request" button
	- "merge pull request"
	- "delte branch" so the repo don't get too complicated-

Github Flow:
	- the github works like this:
		- Create a New Branch:
			- the rule: the master branch is always deployable.
			- when try something new or experiments, create a new branch.
			- when you branch is ready, it can be review, discussed, and merged with main branch when ready.
			- when you make a new branch, you will (almost always) want to make from the master branch.
			- use descriptive names for new branches, so other can understand. 
		- Make Changes and add Commits:
			- make changes by adding, editting and deleting files.
			- whenever you reach a small milestone, add the changes to your branch by commit.
			- adding commits keep track of your work
			- each commit should have a message explaining what has changed and why.
			- each commit becomes a part of the history of the branch, and a point you can revert back to if you need it.
			- make the read easy: good messages and comments
		- Open a Pull Request:
			- notify people you have changes ready for them to consider or review.
			- you can ask other to review your changes or pull your contribution and merge it into the branch.
		- Review:
			- when a pull requet is made, it can be rewied whoever has the proper access to the branch
			- allow people to work together easily and produce better results together
		- Deploy:
			- github allows you to deploy from branch for final testing in production before merging with the master branch
			- if any issue arise, you can undo the changes by deploying the master branch into production again.
		- Merge:
			- after exhaustive testing, you can merge the code into the master branch
			- pull request keep record of changes to your code

after exhaustive testing, you can merge the code into the master branch
			- pull request keep record of changes to your code


